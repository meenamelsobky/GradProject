using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication1.Data;
using WebApplication1.Models.Entities;


namespace WebApplication1.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserVulnerabilityController : ControllerBase
    {
        private readonly AppDbContext _context;

        public UserVulnerabilityController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/UserVulnerability
        [HttpGet]
        public async Task<ActionResult<IEnumerable<UserVulnerability>>> GetUserVulnerabilities()
        {
            return await _context.UserVulnerabilities.ToListAsync();
        }

        // GET: api/UserVulnerability/5/10 (UserId = 5, VulnerabilityId = 10)
        [HttpGet("{userId}/{vulnerabilityId}")]
        public async Task<ActionResult<UserVulnerability>> GetUserVulnerability(int userId, int vulnerabilityId)
        {
            var userVulnerability = await _context.UserVulnerabilities
                .FirstOrDefaultAsync(uv => uv.UserId == userId && uv.VulnerabilityId == vulnerabilityId);
            if (userVulnerability == null) return NotFound();
            return userVulnerability;
        }

        // POST: api/UserVulnerability
        [HttpPost]
        public async Task<ActionResult<UserVulnerability>> PostUserVulnerability(UserVulnerability userVulnerability)
        {
            _context.UserVulnerabilities.Add(userVulnerability);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetUserVulnerability), new { userId = userVulnerability.UserId, vulnerabilityId = userVulnerability.VulnerabilityId }, userVulnerability);
        }

        // PUT: api/UserVulnerability/5/10
        [HttpPut("{userId}/{vulnerabilityId}")]
        public async Task<IActionResult> PutUserVulnerability(int userId, int vulnerabilityId, UserVulnerability userVulnerability)
        {
            if (userId != userVulnerability.UserId || vulnerabilityId != userVulnerability.VulnerabilityId) return BadRequest();
            _context.Entry(userVulnerability).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        // DELETE: api/UserVulnerability/5/10
        [HttpDelete("{userId}/{vulnerabilityId}")]
        public async Task<IActionResult> DeleteUserVulnerability(int userId, int vulnerabilityId)
        {
            var userVulnerability = await _context.UserVulnerabilities
                .FirstOrDefaultAsync(uv => uv.UserId == userId && uv.VulnerabilityId == vulnerabilityId);
            if (userVulnerability == null) return NotFound();
            _context.UserVulnerabilities.Remove(userVulnerability);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}