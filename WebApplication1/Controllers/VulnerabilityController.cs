using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication1.Data;
using WebApplication1.Models.Entities;


namespace WebApplication1.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private readonly AppDbContext _context;

        public VulnerabilityController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/Vulnerability
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Vulnerability>>> GetVulnerabilities()
        {
            return await _context.Vulnerabilities.ToListAsync();
        }

        // GET: api/Vulnerability/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Vulnerability>> GetVulnerability(int id)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (vulnerability == null) return NotFound();
            return vulnerability;
        }

        // POST: api/Vulnerability
        [HttpPost]
        public async Task<ActionResult<Vulnerability>> PostVulnerability(Vulnerability vulnerability)
        {
            _context.Vulnerabilities.Add(vulnerability);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetVulnerability), new { id = vulnerability.Id }, vulnerability);
        }

        // PUT: api/Vulnerability/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutVulnerability(int id, Vulnerability vulnerability)
        {
            if (id != vulnerability.Id) return BadRequest();
            _context.Entry(vulnerability).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        // DELETE: api/Vulnerability/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteVulnerability(int id)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (vulnerability == null) return NotFound();
            _context.Vulnerabilities.Remove(vulnerability);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}